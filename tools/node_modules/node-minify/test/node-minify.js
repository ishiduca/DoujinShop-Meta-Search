'use strict';

var should = require('should');
var compressor = require('../lib/node-minify');

describe('node-minify', function () {
    it('should concat javascript and no compress', function(done) {
        new compressor.minify({
            type: 'gcc',
            fileIn: [__dirname + '/../examples/public/js/base.js', __dirname + '/../examples/public/js/base2.js'],
            fileOut: __dirname + '/../examples/public/js-dist/base-onefile.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with gcc and a single file', function(done) {
        new compressor.minify({
            type: 'gcc',
            fileIn: __dirname + '/../examples/public/js/base.js',
            fileOut: __dirname + '/../examples/public/js-dist/base-min-gcc.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with gcc and a single file with a custom temp path', function(done) {
        new compressor.minify({
            type: 'gcc',
            tempPath: '/tmp/',
            fileIn: __dirname + '/../examples/public/js/base.js',
            fileOut: __dirname + '/../examples/public/js-dist/base-min-gcc.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with gcc and an array of file', function(done) {
        new compressor.minify({
            type: 'gcc',
            fileIn: [__dirname + '/../examples/public/js/base.js', __dirname + '/../examples/public/js/base2.js'],
            fileOut: __dirname + '/../examples/public/js-dist/base-onefile-gcc.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with gcc and an array of file with a custom temp path', function(done) {
        new compressor.minify({
            type: 'gcc',
            tempPath: '/tmp/',
            fileIn: [__dirname + '/../examples/public/js/base.js', __dirname + '/../examples/public/js/base2.js'],
            fileOut: __dirname + '/../examples/public/js-dist/base-onefile-gcc.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with yui and a single file', function(done) {
        new compressor.minify({
            type: 'yui-js',
            fileIn: __dirname + '/../examples/public/js/base.js',
            fileOut: __dirname + '/../examples/public/js-dist/base-min-yui.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with yui and an array of file', function(done) {
        new compressor.minify({
            type: 'yui-js',
            fileIn: [__dirname + '/../examples/public/js/base.js', __dirname + '/../examples/public/js/base2.js'],
            fileOut: __dirname + '/../examples/public/js-dist/base-onefile-yui.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with UglifyJS and a single file', function(done) {
        new compressor.minify({
            type: 'uglifyjs',
            fileIn: __dirname + '/../examples/public/js/base.js',
            fileOut: __dirname + '/../examples/public/js-dist/base-min-uglify.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with UglifyJS and a single file with a custom temp path', function(done) {
        new compressor.minify({
            type: 'uglifyjs',
            tempPath: '/tmp/',
            fileIn: __dirname + '/../examples/public/js/base.js',
            fileOut: __dirname + '/../examples/public/js-dist/base-min-uglify.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with UglifyJS and an array of file', function(done) {
        new compressor.minify({
            type: 'uglifyjs',
            fileIn: [__dirname + '/../examples/public/js/base.js', __dirname + '/../examples/public/js/base2.js'],
            fileOut: __dirname + '/../examples/public/js-dist/base-onefile-uglify.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress javascript with UglifyJS and an array of file with a custom temp path', function(done) {
        new compressor.minify({
            type: 'uglifyjs',
            tempPath: '/tmp/',
            fileIn: [__dirname + '/../examples/public/js/base.js', __dirname + '/../examples/public/js/base2.js'],
            fileOut: __dirname + '/../examples/public/js-dist/base-onefile-uglify.js',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });

    it('should compress css with yui', function(done) {
        new compressor.minify({
            type: 'yui-css',
            fileIn: __dirname + '/../examples/public/css/base.css',
            fileOut: __dirname + '/../examples/public/css/base-min-yui.css',
            callback: function(err, min) {
                should.not.exist(err);
                should.exist(min);

                done();
            }
        });
    });
});