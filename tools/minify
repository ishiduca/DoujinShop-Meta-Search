#!/usr/bin/env node
'use strict'

var fire  = require('minimist-fire')
var ansi  = require('ansi-color')
var Compressor = require('node-minify')
var usage = 'usage: tools/minify input_file ... -O output_js_file'
var opts  = {
    usage: ansi.set(usage, 'yellow')
  , alias: {
        O: 'fileOut'
      , u: 'usage'
      , t: 'type'
    }
  , default: {
        type: 'gcc'
    }
  , required: ['fileOut', '_']
  , validate: {
        fileOut: resolve
      , _: function (fileIns) {
            return fileIns.map(resolve)
        }
      , callback: function (nll, args) {
            return function onMin (err, min) {
                err ? onError(err) : onMinify(args.fileOut, min)
            }
        }
    }
}


try {
    var args = fire(process.argv.slice(2), opts)

    args.fileIn = args._

    delete args.t
    delete args.O
    delete args.u
    delete args._

    new Compressor.minify(args)

} catch (err) {
    onError(err)
}

function onMinify (fileOut, min) {
    console.log(
        ansi.set(fileOut, 'green') +
        ' -- ' +
        min
    )
    process.exit(0)
}

function onError (err) {
    console.error(ansi.set(err, 'red'))
    process.exit(1)
}

function resolve (p) { return require('path').join(process.env.PWD, p) }
